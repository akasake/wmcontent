<?php

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\wmcontent\Entity\WmContentContainer;
use Drupal\wmcontent\Event\ContentBlockChangedEvent;
use Drupal\wmcontent\Field\IndexableBaseFieldDefinition;
use Drupal\wmcontent\WmContentContainerInterface;
use Drupal\wmcontent\WmContentManager;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;

function wmcontent_entity_extra_field_info(): array
{
    $extra = [];
    /** @var WmContentManager $manager */
    $manager = \Drupal::service('wmcontent.manager');

    foreach ($manager->getContainers() as $container) {
        foreach ($container->getHostBundles() as $bundle) {
            $extra[$container->getHostEntityType()][$bundle]['display']['wmc_' . $container->id()] = [
                'label' => 'WmContent: ' . $container->label(),
                'description' => $container->label(),
                'weight' => 0,
                'visible' => true,
            ];
        }
    }

    return $extra;
}

/**
 * This is very necessary to provide us with the correct content translation
 * language (adds the language_content_entity query string when needed.
 *
 * TODO: Ideally we only add this on the enabled entity types/bundles
 * but if we load wmContentContainer::loadMultiple() then we end up looping.
 *
 * @param array EntityTypeInterface[] $entityTypes
 */
function wmcontent_entity_type_alter(array &$entityTypes): void
{
    foreach ($entityTypes as $entity_type) {
        if (!$entity_type->hasLinkTemplate('canonical')) {
            continue;
        }

        if ($entity_type->hasLinkTemplate('drupal:wmcontent-overview')) {
            continue;
        }

        // This breaks on taxonomy terms.
        if ($entity_type->id() !== 'node') {
            continue;
        }

        $entity_type->setLinkTemplate(
            'drupal:wmcontent-overview',
            $entity_type->getLinkTemplate('canonical') . '/wmcontent/{container}'
        );
    }
}

function wmcontent_entity_operation(EntityInterface $entity): array
{
    if (!$entity instanceof ContentEntityInterface) {
        return [];
    }

    if (!$entity->access('update')) {
        return [];
    }

    $operations = [];
    $containers = \Drupal::service('wmcontent.manager')->getHostContainers($entity);
    $routeName = 'entity.' . $entity->getEntityTypeId() . '.wmcontent_overview';

    /** @var WmContentContainerInterface $container */
    foreach ($containers as $container) {
        $operations[$container->id()] = [
            'title' => $container->label(),
            'url' => Url::fromRoute(
                $routeName,
                [
                    $entity->getEntityTypeId() => $entity->id(),
                    'container' => $container->id(),
                ],
                [
                    'language' => $entity->language(),
                ]
            ),
            'weight' => 50,
        ];
    }

    return $operations;
}

function wmcontent_entity_update(EntityInterface $entity): void
{
    if (!$entity instanceof ContentEntityInterface) {
        return;
    }

    /** @var EventDispatcherInterface $dispatcher */
    $dispatcher = \Drupal::service('event_dispatcher');
    /** @var WmContentManager $manager */
    $manager = \Drupal::service('wmcontent.manager');

    if ($manager->isChild($entity)) {
        $dispatcher->dispatch(
            ContentBlockChangedEvent::NAME,
            new ContentBlockChangedEvent($entity, $manager->getChildContainers($entity))
        );
    }
}

function wmcontent_entity_insert(EntityInterface $entity): void
{
    if (!$entity instanceof ContentEntityInterface) {
        return;
    }

    /** @var EventDispatcherInterface $dispatcher */
    $dispatcher = \Drupal::service('event_dispatcher');
    /** @var WmContentManager $manager */
    $manager = \Drupal::service('wmcontent.manager');

    if ($manager->isChild($entity)) {
        $dispatcher->dispatch(
            ContentBlockChangedEvent::NAME,
            new ContentBlockChangedEvent($entity, $manager->getChildContainers($entity))
        );
    }
}

function wmcontent_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display): void
{
    foreach (WmContentContainer::loadMultiple() as $container) {
        // Only load if our container is enabled in the display.
        if (!$display->getComponent('wmc_' . $container->getId())) {
            continue;
        }

        $manager = \Drupal::service('wmcontent.manager');
        $entities = $manager->getContent($entity, $container->getId());

        $delta = 0;
        $paragraphTypeCount = 1;
        $paragraphTypeLast = false;
        $sections = [
            $delta => [
                '#theme' => 'wmcontent_section',
                '#background' => '',
                '#items' => [],
                '#delta' => $delta,
                '#container' => $container->getId(),
            ],
        ];

        foreach ($entities as $content) {
            // If this is a 'break' then add it to the higher level break and switch.
            if ($content->bundle() === 'break') {
                $background = '';
                if ($content->get('break_background')->value) {
                    $background = $content->get('break_background')->value;
                }

                $delta++;
                $sections[$delta] = [
                    '#theme' => 'wmcontent_section',
                    '#background' => $background,
                    '#items' => [],
                    '#delta' => $delta,
                ];

                // Reset the paragraph type count coz we're starting a new
                // section.
                $paragraphTypeCount = 1;
                $paragraphTypeLast = false;
            } else {
                // If it's not a break, just add this paragraph.
                // Do look at the type tough.
                if ($content->bundle() != $paragraphTypeLast) {
                    $paragraphTypeCount = 1;
                    $paragraphTypeLast = $content->bundle();
                }

                $viewBuilder = \Drupal::entityTypeManager()
                    ->getViewBuilder($entity->getEntityTypeId());

                $item = $viewBuilder->view($content);
                $item['#weight'] = $content->get('wmcontent_weight')->getString();
                $item['#size'] = $content->get('wmcontent_size')->getString();
                $item['#alignment'] = $content->get('wmcontent_alignment')->getString();
                $item['#delta'] = $paragraphTypeCount;
                $item['#type'] = $content->getEntityTypeId();
                $item['#bundle'] = $content->bundle();

                $sections[$delta]['#items'][] = $item;
                $paragraphTypeCount++;
            }
        }

        // Fetch empty ones (mainly, the first one).
        foreach ($sections as $delta => $section) {
            if (empty($section['#items'])) {
                unset($sections[$delta]);
            }
        }

        $build['wmc_' . $container->getId()] = [
            '#sections' => $sections,
            '#theme' => 'wmcontent',
            '#container' => $container->getId(),
        ];
    }
}

function wmcontent_theme(): array
{
    return [
        'wmcontent' => [
            'variables' => [
                'sections' => null,
                'container' => null,
            ],
        ],
        'wmcontent_section' => [
            'variables' => [
                'items' => null,
                'background' => null,
                'delta' => null,
                'container' => null,
            ],
        ],
        'paragraph' => [
            'render element' => 'elements',
        ],
        'items' => [
            'render element' => 'elements',
        ],
        // Cards is used to explode 1 paragraph into multiple 'fake'
        // paragraphs on the frontend, e.g. for autofill paragraph types.
        'paragraph_cards' => [
            'variables' => [
                'cards' => null,
                'size' => null,
                'alignment' => null,
                'type' => null,
            ],
        ],
    ];
}

function wmcontent_theme_suggestions_eck_entity(array $variables): array
{
    $suggestions = [];

    if (!empty($variables['entity']) && isset($variables['entity']['#entity_type'])) {
        $suggestions = [
            $variables['entity']['#entity_type'],
            $variables['entity']['#entity_type'] . '__' . $variables['entity']['#entity']->bundle(),
        ];
    }

    return $suggestions;
}

function wmcontent_preprocess_paragraph(array &$variables): void
{
    $paragraph = $variables['entity']['#entity'];

    $variables['bundle'] = $paragraph->bundle();

    if ($size = $paragraph->get('wmcontent_size')->value) {
        $variables['wmcontent_size'] = $size;
    }

    if ($alignment = $paragraph->get('wmcontent_alignment')->value) {
        $variables['wmcontent_alignment'] = $alignment;
    }

    $variables['wmcontent_delta'] = 0;
    if (isset($variables['entity']['#delta'])) {
        $variables['wmcontent_delta'] = (string) $variables['entity']['#delta'];
    }

    $strip = [
        'created',
        'wmcontent_size',
        'wmcontent_alignment',
        'wmcontent_weight',
        'wmcontent_parent',
    ];

    $variables['content'] = [];

    foreach (Element::children($variables['entity']) as $key) {
        if (
            !empty($variables['entity'][$key]['#field_name'])
            && !in_array($variables['entity'][$key]['#field_name'], $strip)
        ) {
            $variables['content'][] = $variables['entity'][$key];
        }
    }
}

function wmcontent_entity_base_field_info(EntityTypeInterface $entity_type): array
{
    $fields = [];

    foreach (WmContentContainer::loadMultiple() as $conf) {
        // Match. This is kind of wrong because we're going to overload all
        // the bundles of the entity type with our fields.
        if ($entity_type->id() !== $conf->getChildEntityType()) {
            continue;
        }

        $fields['wmcontent_size'] = BaseFieldDefinition::create('list_string')
            ->setLabel(t('Size'))
            ->setDescription(t('Select the size.'))
            ->setRequired(true)
            ->setSetting('allowed_values_function', '_wmcontent_sizes')
            ->setDefaultValueCallback('_wmcontent_default_size')
            ->setDisplayConfigurable('form', true)
            ->setDisplayOptions(
                'form',
                [
                    'type' => 'options_select',
                    'settings' => [
                        'display_label' => true,
                    ],
                    'weight' => 20,
                ]
            )
            ->setDisplayOptions(
                'view',
                [
                    'label' => 'hidden',
                    'type' => 'string',
                    'weight' => -5,
                ]
            );

        $fields['wmcontent_alignment'] = BaseFieldDefinition::create('list_string')
            ->setLabel(t('Alignment'))
            ->setDescription(t('Select the Alignment.'))
            ->setRequired(true)
            ->setSetting('allowed_values_function', '_wmcontent_alignments')
            ->setDefaultValueCallback('_wmcontent_default_alignment')
            ->setDisplayConfigurable('form', true)
            ->setDisplayOptions(
                'form',
                [
                    'type' => 'options_select',
                    'settings' => [
                        'display_label' => true,
                    ],
                    'weight' => 20,
                ]
            )
            ->setDisplayOptions(
                'view',
                [
                    'label' => 'hidden',
                    'type' => 'string',
                    'weight' => -5,
                ]
            );

        $fields['wmcontent_weight'] = IndexableBaseFieldDefinition::create('integer')
            ->setLabel(t('Weight'))
            ->setRequired(true)
            ->setSetting('default_value', 0)
            ->setDescription(t('The weight of this child.'))
            ->setDisplayConfigurable('form', true)
            ->setDisplayOptions(
                'form',
                [
                    'type' => 'hidden',
                    'settings' => [
                        'display_label' => true,
                    ],
                    'weight' => 20,
                ]
            )
            ->setDisplayOptions(
                'view',
                [
                    'label' => 'hidden',
                    'type' => 'string',
                    'weight' => -5,
                ]
            )
            ->addIndex('value');

        // The parent is an entity reference to the parent entity, which allows
        // to access the parent id with $entity->parent->target_id and the parent
        // entity with $entity->parent->entity.
        $fields['wmcontent_parent'] = IndexableBaseFieldDefinition::create('integer')
            ->setLabel(t('Host'))
            ->setDescription(t('The entity id of the host.'))
            ->setRequired(true)
            ->setReadOnly(true)
            ->setDisplayConfigurable('form', true)
            ->setDisplayOptions(
                'form',
                [
                    'type' => 'hidden',
                    'settings' => [
                        'display_label' => true,
                    ],
                    'weight' => 20,
                ]
            )
            ->setDisplayOptions(
                'view',
                [
                    'label' => 'hidden',
                    'type' => 'string',
                    'weight' => -5,
                ]
            )
            ->addIndex('value');

        $fields['wmcontent_parent_type'] = IndexableBaseFieldDefinition::create('string')
            ->setLabel(t('Host Type'))
            ->setDescription(t('The entity type of the host.'))
            ->setRequired(true)
            ->setReadOnly(true)
            ->setDisplayConfigurable('form', true)
            ->setDisplayOptions(
                'form',
                [
                    'type' => 'hidden',
                    'settings' => [
                        'display_label' => true,
                    ],
                    'weight' => 20,
                ]
            )
            ->addIndex('value');

        $fields['wmcontent_container'] = IndexableBaseFieldDefinition::create('string')
            ->setLabel(t('Container'))
            ->setDescription(t('The container in the host.'))
            ->setRequired(true)
            ->setReadOnly(true)
            ->setSetting('default_value', 'content')
            ->setDisplayConfigurable('form', true)
            ->setDisplayOptions(
                'form',
                [
                    'type' => 'hidden',
                    'settings' => [
                        'display_label' => true,
                    ],
                    'weight' => 20,
                ]
            )
            ->addIndex('value');
    }

    return $fields;
}

function _wmcontent_sizes(?FieldStorageDefinitionInterface $definition = null, ?FieldableEntityInterface $entity = null)
{
    $bundle = null;
    $type = null;

    $defaults = [
        'small' => t('Small'),
        'medium' => t('Medium'),
        'large' => t('Large'),
        'full' => t('Full'),
    ];

    if ($entity instanceof FieldableEntityInterface) {
        $bundle = $entity->bundle();
        $type = $entity->getEntityTypeId();
    }

    $sizes = \Drupal::moduleHandler()
        ->invokeAll('wmcontent_sizes_alter', [$type, $bundle, $defaults]);

    if (empty($sizes)) {
        return $defaults;
    }

    return $sizes;
}

function _wmcontent_default_size(?FieldableEntityInterface $entity = null)
{
    $bundle = null;
    $type = null;

    if ($entity instanceof FieldableEntityInterface) {
        $bundle = $entity->bundle();
        $type = $entity->getEntityTypeId();
    }

    $default = \Drupal::moduleHandler()
        ->invokeAll('wmcontent_default_size_alter', [$type, $bundle]);

    $first = array_keys(_wmcontent_sizes(null, $entity))[0] ?? null;

    return $default ?? $first;
}

function _wmcontent_alignments(?FieldStorageDefinitionInterface $definition = null, ?FieldableEntityInterface $entity = null)
{
    $bundle = null;
    $type = null;

    $defaults = [
        'left' => t('Left'),
        'right' => t('Right'),
        'justified' => t('Justified'),
    ];

    if ($entity instanceof FieldableEntityInterface) {
        $bundle = $entity->bundle();
        $type = $entity->getEntityTypeId();
    }

    $alignments = \Drupal::moduleHandler()
        ->invokeAll('wmcontent_alignments_alter', [$type, $bundle, $defaults]);

    if (empty($alignments)) {
        return $defaults;
    }

    return $alignments;
}

function _wmcontent_default_alignment(?FieldableEntityInterface $entity = null)
{
    $bundle = null;
    $type = null;

    if ($entity instanceof FieldableEntityInterface) {
        $bundle = $entity->bundle();
        $type = $entity->getEntityTypeId();
    }

    $default = \Drupal::moduleHandler()
        ->invokeAll('wmcontent_default_alignment_alter', [$type, $bundle]);

    $first = array_keys(_wmcontent_alignments(null, $entity))[0] ?? null;

    return $default ?? $first;
}

function wmcontent_form_alter(array &$form, FormStateInterface $formState, string $formId)
{
    /** @var WmContentContainerInterface $entity */
    foreach (WmContentContainer::loadMultiple() as $entity) {
        $config = $entity->getConfig();

        foreach ($config['child_bundles'] as $bundle) {
            if ($formId !== $config['child_entity_type'] . '_' . $bundle . '_form') {
                continue;
            }

            if (
                $config['hide_single_option_sizes']
                && isset($form['wmcontent_size']['widget']['#options'])
                && count($form['wmcontent_size']['widget']['#options']) === 1
            ) {
                $form['wmcontent_size']['#access'] = false;
            }

            if (
                $config['hide_single_option_alignments']
                && isset($form['wmcontent_alignment']['widget']['#options'])
                && count($form['wmcontent_alignment']['widget']['#options']) === 1
            ) {
                $form['wmcontent_alignment']['#access'] = false;
            }
        }
    }
}
