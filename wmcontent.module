<?php

/**
 * @file
 * Defines the Wieni Content module.
 *
 * @category module
 *
 * @package Wieni
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Url;
use Drupal\wmcontent\Entity\WmContentContainer;

/**
 * Implements hook_entity_extra_field_info().
 */
function wmcontent_entity_extra_field_info()
{
    $extra = [];

    /** @var \Drupal\wmcontent\WmContentManager $manager */
    $manager = \Drupal::service('wmcontent.manager');
    foreach ($manager->getContainers() as $container) {
        foreach ($container->getHostBundles() as $bundle) {
            $extra[$container->getHostEntityType()][$bundle]['display']['wmc_' . $container->id()] = [
                'label' => 'WmContent: ' . $container->label(),
                'description' => $container->label(),
                'weight' => 0,
                'visible' => true,
            ];
        }
    }

    return $extra;
}

/**
 * Implements hook_entity_type_alter().
 *
 * This is very necesarry to provide us with the correct content translation
 * language (adds the language_content_entity query string when needed.
 *
 * TODO: Ideally we only add this on the enabled entity types/bundles
 * but if we load wmContentContainer::loadMultiple() then we end up looping.
 *
 * @see \Drupal\Core\Entity\Annotation\EntityType
 *
 * @param array $entity_types
 */
function wmcontent_entity_type_alter(array &$entity_types)
{
    // Provide defaults for translation info.
    /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
    foreach ($entity_types as $entity_type) {
        if ($entity_type->hasLinkTemplate('canonical')) {
            // Provide default route names for the wmcontent paths.
            if (!$entity_type->hasLinkTemplate('drupal:wmcontent-overview')) {
                // This breaks on taxonomy terms.
                if ($entity_type->id() == 'node') {
                    $wmcontent_path = $entity_type->getLinkTemplate('canonical') . '/wmcontent/{container}';
                    $entity_type->setLinkTemplate(
                        'drupal:wmcontent-overview',
                        $wmcontent_path
                    );
                }
            }
        }
    }
}

/**
 * Implements hook_entity_operation().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @return array
 */
function wmcontent_entity_operation(EntityInterface $entity)
{
    if (!$entity instanceof ContentEntityInterface) {
        return [];
    }

    if (!$entity->access('update')) {
        return [];
    }

    $operations = [];

    /** @var \Drupal\wmcontent\WmContentManager $manager */
    $manager = \Drupal::service('wmcontent.manager');

    $routeName = 'entity.' . $entity->getEntityTypeId() . '.wmcontent_overview';
    // Get the containers this entity hosts
    foreach ($manager->getHostContainers($entity) as $container) {
        $operations[$container->id()] = [
            'title' => $container->label(),
            'url' => Url::fromRoute(
                $routeName,
                [
                    $entity->getEntityTypeId() => $entity->id(),
                    'container' => $container->id(),
                ],
                [
                    'language' => $entity->language(),
                ]
            ),
            'weight' => 50,
        ];
    }

    return $operations;
}

/**
 * Implements hook_entity_update().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function wmcontent_entity_update(EntityInterface $entity)
{
    if (!$entity instanceof ContentEntityInterface) {
        return;
    }
    /** @var \Drupal\wmcontent\WmContentManager $manager */
    $manager = \Drupal::service('wmcontent.manager');
    if ($manager->isContentBlock($entity)) {
        $manager->emitChangedEvent($entity, $manager->getContainers($entity));
    }
}

function wmcontent_entity_insert(EntityInterface $entity)
{
    if (!$entity instanceof ContentEntityInterface) {
        return;
    }
    /** @var \Drupal\wmcontent\WmContentManager $manager */
    $manager = \Drupal::service('wmcontent.manager');
    if ($manager->isContentBlock($entity)) {
        $manager->emitChangedEvent($entity, $manager->getContainers($entity));
    }
}

/**
 * Implements hook_entity_view().
 *
 * @param array $build
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 * @param $view_mode
 */
function wmcontent_entity_view(
    array &$build,
    EntityInterface $entity,
    EntityViewDisplayInterface $display,
    $view_mode
) {

    // Loadup our config.
    foreach (wmContentContainer::loadMultiple() as $container) {
        // Only load if our container is enabled in the display.
        if ($display->getComponent('wmc_' . $container->getId())) {
            // Load up our service and get the content, ordered by weight.
            $manager = \Drupal::service('wmcontent.manager');
            $entities = $manager->getContent(
                $entity,
                $container->getId()
            );

            $delta = 0;
            $paragraph_type_count = 1;
            $paragraph_type_last = false;
            $sections = [
                $delta => [
                    '#theme' => 'wmcontent_section',
                    '#background' => '',
                    '#items' => [],
                    '#delta' => $delta,
                    '#container' => $container->getId(),
                ],
            ];

            foreach ($entities as $content) {
                // If this is a 'break' then add it to the higher level break and switch.
                if ($content->bundle() == 'break') {
                    $background = '';
                    if ($content->get('break_background')->value) {
                        $background = $content->get('break_background')->value;
                    }

                    $delta++;
                    $sections[$delta] = [
                        '#theme' => 'wmcontent_section',
                        '#background' => $background,
                        '#items' => [],
                        '#delta' => $delta,
                    ];

                    // Reset the paragraph type count coz we're starting a new
                    // section.
                    $paragraph_type_count = 1;
                    $paragraph_type_last = false;
                } else {
                    // If it's not a break, just add this paragraph.
                    // Do look at the type tough.
                    if ($content->bundle() != $paragraph_type_last) {
                        $paragraph_type_count = 1;
                        $paragraph_type_last = $content->bundle();
                    }
                    $item = entity_view($content, 'full');
                    $item['#weight'] = $content->get('wmcontent_weight')->getString();
                    $item['#size'] = $content->get('wmcontent_size')->getString();
                    $item['#alignment'] = $content->get('wmcontent_alignment')->getString();
                    $item['#delta'] = $paragraph_type_count;
                    $item['#type'] = $content->getEntityTypeId();
                    $item['#bundle'] = $content->bundle();


                    $sections[$delta]['#items'][] = $item;
                    $paragraph_type_count++;
                }
            }


            // Fetch empty ones (mainly, the first one).
            foreach ($sections as $delta => $section) {
                if (empty($section['#items'])) {
                    unset($sections[$delta]);
                }
            }

            $build['wmc_' . $container->getId()] = array(
                '#sections' => $sections,
                '#theme' => 'wmcontent',
                '#container' => $container->getId(),
            );
        }
    }
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 *
 * @return array
 */
function wmcontent_theme($existing, $type, $theme, $path)
{
    return [
        'wmcontent' => [
            'variables' => [
                'sections' => null,
                'container' => null,
            ],
        ],
        'wmcontent_section' => [
            'variables' => [
                'items' => null,
                'background' => null,
                'delta' => null,
                'container' => null,
            ],
        ],
        'paragraph' => [
            'render element' => 'elements',
        ],
        'items' => [
            'render element' => 'elements',
        ],
        // Cards is used to explode 1 paragraph into multiple 'fake'
        // paragraphs on the frontend. Bv voor autofill paragraph types.
        'paragraph_cards' => [
            'variables' => [
                'cards' => null,
                'size' => null,
                'alignment' => null,
                'type' => null,
            ],
        ],
    ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * @param array $variables
 *
 * @return array
 */
function wmcontent_theme_suggestions_eck_entity(array $variables)
{
    $suggestions = [];

    // Add theme suggestiongs for the type and the the type__bundle.
    if (!empty($variables['entity']) && isset($variables['entity']['#entity_type'])) {
        $suggestions = [
            $variables['entity']['#entity_type'],
            $variables['entity']['#entity_type'] . '__' . $variables['entity']['#entity']->bundle(),
        ];
    }

    return $suggestions;
}

/**
 * Prepares variables for paragraph templates.
 *
 * @param $variables
 */
function wmcontent_preprocess_paragraph(&$variables)
{
    $paragraph = $variables['entity']['#entity'];

    $variables['bundle'] = $paragraph->bundle();

    // Add size.
    $size = $paragraph->get('wmcontent_size')->value;
    if (strlen($size) > 0) {
        $variables['wmcontent_size'] = $size;
    }

    $alignment = $paragraph->get('wmcontent_alignment')->value;
    if (strlen($size) > 0) {
        $variables['wmcontent_alignment'] = $alignment;
    }

    // Add delta.
    $variables['wmcontent_delta'] = 0;
    if (isset($variables['entity']['#delta'])) {
        $variables['wmcontent_delta'] = (string) $variables['entity']['#delta'];
    }

    $strip = [
        'created',
        'wmcontent_size',
        'wmcontent_alignment',
        'wmcontent_weight',
        'wmcontent_parent',
    ];

    // Add to render array except size.
    $variables['content'] = [];
    foreach (Element::children($variables['entity']) as $key) {
        if (!empty($variables['entity'][$key]['#field_name'])
            && !in_array($variables['entity'][$key]['#field_name'], $strip)
        ) {
            $variables['content'][] = $variables['entity'][$key];
        }
    }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * More intel at https://www.drupal.org/node/1879542
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 *
 * @return array
 */
function wmcontent_entity_base_field_info(EntityTypeInterface $entity_type)
{
    $fields = array();
    foreach (wmContentContainer::loadMultiple() as $conf) {
        // Match. This is kind of wrong because we're going to overload all
        // the bundles of the entity type with our fields.
        if ($entity_type->id() === $conf->getChildEntityType()) {
            $fields['wmcontent_size'] = BaseFieldDefinition::create('list_string')
                ->setLabel(t('Size'))
                ->setDescription(t('Select the size.'))
                ->setRequired(true)
                ->setSetting('allowed_values_function', '_wmcontent_sizes')
                ->setDefaultValueCallback('_wmcontent_default_size')
                ->setDisplayConfigurable('form', true)
                ->setDisplayOptions(
                    'form',
                    array(
                        'type' => 'options_select',
                        'settings' => array(
                            'display_label' => true,
                        ),
                        'weight' => 20,
                    )
                )
                ->setDisplayOptions(
                    'view',
                    array(
                        'label' => 'hidden',
                        'type' => 'string',
                        'weight' => -5,
                    )
                );

            $fields['wmcontent_alignment'] = BaseFieldDefinition::create('list_string')
                ->setLabel(t('Alignment'))
                ->setDescription(t('Select the Alignment.'))
                ->setRequired(true)
                ->setSetting('allowed_values_function', '_wmcontent_alignments')
                ->setDefaultValueCallback('_wmcontent_default_alignment')
                ->setDisplayConfigurable('form', true)
                ->setDisplayOptions(
                    'form',
                    array(
                        'type' => 'options_select',
                        'settings' => array(
                            'display_label' => true,
                        ),
                        'weight' => 20,
                    )
                )
                ->setDisplayOptions(
                    'view',
                    array(
                        'label' => 'hidden',
                        'type' => 'string',
                        'weight' => -5,
                    )
                );

            $fields['wmcontent_weight'] = BaseFieldDefinition::create('integer')
                ->setLabel(t('Weight'))
                ->setRequired(true)
                ->setSetting('default_value', 0)
                ->setDescription(t('The weight of this child.'))
                ->setDisplayConfigurable('form', true)
                ->setDisplayOptions(
                    'form',
                    array(
                        'type' => 'hidden',
                        'settings' => array(
                            'display_label' => true,
                        ),
                        'weight' => 20,
                    )
                )
                ->setDisplayOptions(
                    'view',
                    array(
                        'label' => 'hidden',
                        'type' => 'string',
                        'weight' => -5,
                    )
                );

            // The parent is an entity reference to the parent entity, which allows
            // to access the parent id with $entity->parent->target_id and the parent
            // entity with $entity->parent->entity.
            $fields['wmcontent_parent'] = BaseFieldDefinition::create('integer')
                ->setLabel(t('Host'))
                ->setDescription(t('The entity id of the host.'))
                ->setRequired(true)
                ->setReadOnly(true)
                ->setDisplayConfigurable('form', true)
                ->setDisplayOptions(
                    'form',
                    array(
                        'type' => 'hidden',
                        'settings' => array(
                            'display_label' => true,
                        ),
                        'weight' => 20,
                    )
                )
                ->setDisplayOptions(
                    'view',
                    array(
                        'label' => 'hidden',
                        'type' => 'string',
                        'weight' => -5,
                    )
                );

            $fields['wmcontent_parent_type'] = BaseFieldDefinition::create('string')
                ->setLabel(t('Host Type'))
                ->setDescription(t('The entity type of the host.'))
                ->setRequired(true)
                ->setReadOnly(true)
                ->setDisplayConfigurable('form', true)
                ->setDisplayOptions(
                    'form',
                    array(
                        'type' => 'hidden',
                        'settings' => array(
                            'display_label' => true,
                        ),
                        'weight' => 20,
                    )
                );

            $fields['wmcontent_container'] = BaseFieldDefinition::create('string')
                ->setLabel(t('Container'))
                ->setDescription(t('The container in the host.'))
                ->setRequired(true)
                ->setReadOnly(true)
                ->setSetting('default_value', 'content')
                ->setDisplayConfigurable('form', true)
                ->setDisplayOptions(
                    'form',
                    array(
                        'type' => 'hidden',
                        'settings' => array(
                            'display_label' => true,
                        ),
                        'weight' => 20,
                    )
                );
        }
    }

    return $fields;
}

function _wmcontent_sizes(FieldStorageDefinitionInterface $definition = null, FieldableEntityInterface $entity = null)
{
    $bundle = null;
    $type = null;

    $defaults = [
        'small' => t('Small'),
        'medium' => t('Medium'),
        'large' => t('Large'),
        'full' => t('Full'),
    ];

    if ($entity instanceof FieldableEntityInterface) {
        $bundle = $entity->bundle();
        $type = $entity->getEntityTypeId();
    }

    $sizes = \Drupal::moduleHandler()
        ->invokeAll('wmcontent_sizes_alter', [$type, $bundle, $defaults]);

    if (empty($sizes)) {
        return $defaults;
    }

    return $sizes;
}

function _wmcontent_default_size(FieldableEntityInterface $entity = null)
{
    $bundle = null;
    $type = null;

    if ($entity instanceof FieldableEntityInterface) {
        $bundle = $entity->bundle();
        $type = $entity->getEntityTypeId();
    }

    return \Drupal::moduleHandler()
        ->invokeAll('wmcontent_default_size_alter', [$type, $bundle]);
}

function _wmcontent_alignments(FieldStorageDefinitionInterface $definition = null, FieldableEntityInterface $entity = null)
{
    $bundle = null;
    $type = null;

    $defaults = [
        'left' => t('Left'),
        'right' => t('Right'),
        'justified' => t('Justified'),
    ];

    if ($entity instanceof FieldableEntityInterface) {
        $bundle = $entity->bundle();
        $type = $entity->getEntityTypeId();
    }

    $alignments = \Drupal::moduleHandler()
        ->invokeAll('wmcontent_alignments_alter', [$type, $bundle, $defaults]);

    if (empty($alignments)) {
        return $defaults;
    }

    return $alignments;
}

function _wmcontent_default_alignment(FieldableEntityInterface $entity = null)
{
    $bundle = null;
    $type = null;

    if ($entity instanceof FieldableEntityInterface) {
        $bundle = $entity->bundle();
        $type = $entity->getEntityTypeId();
    }

    return \Drupal::moduleHandler()
        ->invokeAll('wmcontent_default_alignment_alter', [$type, $bundle]);
}

function wmcontent_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    /** @var WmContentContainer $entity */
    foreach (wmContentContainer::loadMultiple() as $entity) {
        $config = $entity->getConfig();

        foreach ($config['child_bundles'] as $bundle) {
            // Build up what the form id for this child would be.
            $test = $config['child_entity_type'] . '_' . $bundle . '_form';

            if ($test !== $form_id) {
                continue;
            }

            if (
                $config['hide_single_option_sizes']
                && isset($form['wmcontent_size']['widget']['#options'])
                && count($form['wmcontent_size']['widget']['#options']) === 1
            ) {
                unset($form['wmcontent_size']);
                $form['wmcontent_size']['#type'] = "hidden";

                if (isset($form['wmcontent_size']['#default_value'])) {
                    $form['wmcontent_size']['#value'] = $form['wmcontent_size']['#default_value'];
                }
            }

            if (
                $config['hide_single_option_alignments']
                && isset($form['wmcontent_alignment']['widget']['#options'])
                && count($form['wmcontent_alignment']['widget']['#options']) === 1
            ) {
                unset($form['wmcontent_alignment']);
                $form['wmcontent_alignment']['#type'] = 'hidden';

                if (isset($form['wmcontent_alignment']['#default_value'])) {
                    $form['wmcontent_alignment']['#value'] = $form['wmcontent_alignment']['#default_value'];
                }
            }
        }
    }
}
