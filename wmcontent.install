<?php

/**
 * @file
 * Installation file for wmcontent module.
 */

use Drupal\wmcontent\Entity\WmContentContainer;
use Drupal\wmcontent\Field\IndexableBaseFieldDefinition;

/**
 * Implements hook_install().
 */
function wmcontent_install() {
  // Add our base fields to the schema.
    /** @var WmContentContainer $container */
    foreach (WmContentContainer::loadMultiple() as $container) {
        \Drupal::service('wmcontent.entity_updates')
            ->applyUpdates($container->getChildEntityType());
    }
}

/**
 * Implements hook_uninstall().
 */
function wmcontent_uninstall() {
  // Remove our base fields from the schema.
    /** @var WmContentContainer $container */
    foreach (WmContentContainer::loadMultiple() as $container) {
        \Drupal::service('wmcontent.entity_updates')
            ->applyUpdates($container->getChildEntityType());
    }
}

/**
 * Implements hook_update().
 */
function wmcontent_update_8001() {
    /** @var WmContentContainer $container */
    foreach (WmContentContainer::loadMultiple() as $container) {
        \Drupal::service('wmcontent.entity_updates')
            ->applyUpdates($container->getChildEntityType());
    }
}

/**
 * Add indexes to the wmcontent_weight, wmcontent_parent,
 * wmcontent_parent_type & wmcontent_container base fields
 */
function wmcontent_update_8002()
{
    /** @var WmContentContainer $container */
    $containers = WmContentContainer::loadMultiple();
    $updateManager = \Drupal::entityDefinitionUpdateManager();
    $fieldNames = [
        'wmcontent_weight',
        'wmcontent_parent',
        'wmcontent_parent_type',
        'wmcontent_container',
    ];

    foreach ($containers as $container) {
        foreach ($fieldNames as $fieldName) {
            $storageDefinition = $updateManager->getFieldStorageDefinition(
                $fieldName,
                $container->getChildEntityType()
            );

            if (!$storageDefinition) {
                continue;
            }

            $newDefinition = IndexableBaseFieldDefinition::wrap($storageDefinition)
                ->addIndex('value');
            $updateManager->updateFieldStorageDefinition($newDefinition);
        }
    }
}
